import"./style.css";import*as THREE from"three";import*as TWEEN from"tween.js";import gsap from"gsap";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{DRACOLoader}from"three/examples/jsm/loaders/DRACOLoader.js";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader.js";import{DragControls}from"three/examples/jsm/controls/DragControls.js";import{EffectComposer}from"three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass}from"three/examples/jsm/postprocessing/RenderPass.js";import{ShaderPass}from"three/examples/jsm/postprocessing/ShaderPass.js";import{OutlinePass}from"three/examples/jsm/postprocessing/OutlinePass.js";import{FXAAShader}from"three/examples/jsm/shaders/FXAAShader.js";import*as dat from"dat.gui";import{Vector3}from"three";const gui=new dat.GUI;let camera,scene,renderer,group,composer,effectFXAA,outlinePass;dat.GUI.toggleHide();let selectedObjects=[];const canvas=document.querySelector("canvas.webgl"),editRoom=document.getElementById("moveCamera"),writePoem=document.getElementById("writePoem"),webglHTML=document.getElementById("webgl"),objects=[],camParameters={left:0,right:0,top:0,bottom:0,near:0,far:0},params={edgeStrength:3,edgeGlow:0,edgeThickness:1,pulsePeriod:0,rotate:!1,usePatternTexture:!1};function Configuration(){this.visibleEdgeColor="#ffffff",this.hiddenEdgeColor="#190a05"}gui.add(params,"edgeStrength",.01,10).onChange((function(e){outlinePass.edgeStrength=Number(e)})),gui.add(params,"edgeGlow",0,1).onChange((function(e){outlinePass.edgeGlow=Number(e)})),gui.add(params,"edgeThickness",1,4).onChange((function(e){outlinePass.edgeThickness=Number(e)}));const conf=new Configuration;gui.addColor(conf,"visibleEdgeColor").onChange((function(e){outlinePass.visibleEdgeColor.set(e)})),gui.addColor(conf,"hiddenEdgeColor").onChange((function(e){outlinePass.hiddenEdgeColor.set(e)}));const mouse=new THREE.Vector2,raycaster=new THREE.Raycaster;scene=new THREE.Scene,group=new THREE.Group,scene.add(group);const dracoLoader=new DRACOLoader;dracoLoader.setDecoderPath("/draco/");const gltfLoader=new GLTFLoader;gltfLoader.setDRACOLoader(dracoLoader);let mixer=null;gltfLoader.load("/models/RoomObjects/Plant/Houseplant.gltf",(e=>{const t=[...e.scene.children];for(const e of t)e.scale.set(.2,.2,.2),scene.add(e),objects.push(e)}));const couch=new THREE.Group;gltfLoader.load("/models/RoomObjects/Sofa/Sofa.gltf",(e=>{const t=[...e.scene.children];for(const e of t)e.rotation.x=.5*Math.PI,e.scale.set(.1,.1,.1),couch.add(e)})),scene.add(couch),objects.push(couch);const floorDim=[8,12],floor=new THREE.Mesh(new THREE.PlaneGeometry(floorDim[0],floorDim[1]),new THREE.MeshStandardMaterial({color:"#878787",metalness:0,roughness:.5}));floor.receiveShadow=!0,floor.rotation.x=.5*-Math.PI,scene.add(floor);const line1=new THREE.BoxGeometry(1,.075,.075),line2=new THREE.BoxGeometry(.075,1,.075),lineMaterial=new THREE.MeshStandardMaterial({color:"#000000",metalness:0,roughness:0});for(let e=0;e<8;e++){var tempX=floorDim[0]/2+.25,tempY=5,tempZ=floorDim[1]/2+.25;1==e?tempX=-floorDim[0]/2-.25:2==e?(tempX=-floorDim[0]/2-.25,tempY=0):3==e?(tempX=floorDim[0]/2+.25,tempY=0):4==e?(tempX=-floorDim[0]/2-.25,tempY=0,tempZ=-floorDim[1]/2-.25):5==e?(tempX=floorDim[0]/2+.25,tempY=0,tempZ=-floorDim[1]/2-.25):6==e?(tempX=-floorDim[0]/2-.25,tempY=5,tempZ=-floorDim[1]/2-.25):7==e&&(tempX=floorDim[0]/2+.25,tempY=5,tempZ=-floorDim[1]/2-.25);const t=new THREE.Mesh(line1,lineMaterial);t.rotation.x=.5*-Math.PI,t.position.set(tempX,tempY,tempZ);const o=new THREE.Mesh(line2,lineMaterial);o.rotation.x=.5*-Math.PI,o.position.set(tempX,tempY,tempZ);const a=new THREE.Mesh(line1,lineMaterial);a.position.set(tempX,tempY,tempZ);const r=new THREE.Mesh(line2,lineMaterial);r.position.set(tempX,tempY,tempZ),scene.add(t),scene.add(o),scene.add(a),scene.add(r),console.log(tempX)}const ambientLight=new THREE.AmbientLight(16777215,.7);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(16777215,1),helper=new THREE.DirectionalLightHelper(directionalLight,5);function onClick(e){const t=dragControls.getObjects();t.length=0,mouse.x=e.clientX/window.innerWidth*2-1,mouse.y=-e.clientY/window.innerHeight*2+1,raycaster.setFromCamera(mouse,camera);const o=raycaster.intersectObjects(objects,!0);for(const e of objects)console.log(e);o.length>0&&(dragControls.transformGroup=!0,t.push(group)),0===group.children.length&&(dragControls.transformGroup=!1,t.push(...objects)),console.log(mouse)}directionalLight.castShadow=!0,directionalLight.shadow.mapSize.set(1024,1024),directionalLight.shadow.camera.far=15,directionalLight.shadow.camera.left=-7,directionalLight.shadow.camera.top=7,directionalLight.shadow.camera.right=7,directionalLight.shadow.camera.bottom=-7,directionalLight.position.set(5,12,-4),directionalLight.target.position.set(0,0,0),directionalLight.lookAt(0,2,0),scene.add(directionalLight);const sizes={width:window.innerWidth,height:window.innerHeight};function updateCamera(){camera=new THREE.OrthographicCamera(camParameters.left,camParameters.right,camParameters.top,camParameters.bottom,camParameters.near,camParameters.far)}window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camParameters.left=sizes.width/-2,camParameters.right=sizes.width/2,camParameters.top=sizes.height/2,camParameters.bottom=sizes.height/-2,camera.left=camParameters.left,camera.right=camParameters.right,camera.top=camParameters.top,camera.bottom=camParameters.bottom,console.log(camParameters),camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))})),camParameters.left=sizes.width/-2,camParameters.right=sizes.width/2,camParameters.top=sizes.height/2,camParameters.bottom=sizes.height/-2,camParameters.near=-10,camParameters.far=100,gui.add(camParameters,"left").min(-1e3).max(1e3).step(1).onFinishChange(updateCamera),console.log(camParameters),camera=new THREE.OrthographicCamera(camParameters.left,camParameters.right,camParameters.top,camParameters.bottom,camParameters.near,camParameters.far),/Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)?camera.zoom=40:camera.zoom=50,camera.position.set(4,4,-4),camera.lookAt(new Vector3(0,0,0)),camera.updateProjectionMatrix(),scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.target.set(0,0,0),controls.autoRotate=!0,controls.autoRotateSpeed=2,controls.enableZoom=!1,controls.enablePan=!1,controls.update();let controlUpdating=!0;function flipControl(){controlUpdating=1!=controlUpdating}function moveCamera(){1==controls.enabled?(flipControl(),controls.enabled=!1,editRoom.innerText="Done Editing",gsap.to(camera.position,{duration:1,delay:0,x:0,y:4,z:0}),gsap.to(camera.rotation,{duration:1,delay:0,x:.5*-Math.PI,y:0,z:0}).then(dragControls.activate()),controls.autoRotate=!1,controls.enableRotate=!1,controls.enableDamping=!1,camera.updateProjectionMatrix(),render()):0==controls.enabled&&(dragControls.deactivate(),editRoom.innerText="Edit Room",gsap.to(camera.position,{duration:1,delay:0,x:0,y:4,z:4}),gsap.to(camera.rotation,{duration:1,delay:0,x:-1.0190506056799675,y:.8258247889094881,z:.873718057648819}).then(flipControl(),controls.enabled=!0,controls.autoRotate=!0,controls.enableRotate=!0,controls.target.set(0,0,0))),console.log("clicked")}function moveCanvas(){writePoem.style.visibility="hidden",console.log("moved canvas"),canvas.style.transition="1s",canvas.style.left="-100%"}document.addEventListener("click",onClick),document.addEventListener("mousemove",onTouchMove),document.addEventListener("touchmove",onTouchMove),editRoom.onclick=function(){moveCamera()},writePoem.onclick=function(){moveCanvas()},renderer=new THREE.WebGLRenderer({canvas,alpha:!0}),renderer.setClearColor(15198183,1),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),composer=new EffectComposer(renderer);const renderPass=new RenderPass(scene,camera);function onTouchMove(e){var t,o;e.changedTouches?(t=e.changedTouches[0].pageX,o=e.changedTouches[0].pageY):(t=e.clientX,o=e.clientY),mouse.x=t/window.innerWidth*2-1,mouse.y=-o/window.innerHeight*2+1,checkIntersection()}function addSelectedObject(e){selectedObjects=[],selectedObjects.push(e)}function checkIntersection(){raycaster.setFromCamera(mouse,camera);var e=raycaster.intersectObject(scene,!0);if(e.length>0){for(var t=0;t<objects.length;t++){var o=e[0].object;objects[t]==o&&(addSelectedObject(o),outlinePass.selectedObjects=selectedObjects)}console.log(outlinePass)}}composer.addPass(renderPass),outlinePass=new OutlinePass(new THREE.Vector2(window.innerWidth,window.innerHeight),scene,camera),composer.addPass(outlinePass),effectFXAA=new ShaderPass(FXAAShader),effectFXAA.uniforms.resolution.value.set(1/window.innerWidth,1/window.innerHeight),composer.addPass(effectFXAA);const dragControls=new DragControls([...objects],camera,renderer.domElement);dragControls.deactivate(),dragControls.addEventListener("drag",render),dragControls.addEventListener("drag",(e=>{}));const clock=new THREE.Clock;let previousTime=0;const tick=()=>{const e=clock.getElapsedTime(),t=e-previousTime;previousTime=e,null!==mixer&&mixer.update(t),composer.render(t),1==controlUpdating&&controls.update(t),renderer.render(scene,camera),window.requestAnimationFrame(tick)};function render(){renderer.render(scene,camera)}console.log(camera.rotation),tick();